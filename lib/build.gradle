plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "base"
    id "maven-publish"
}

apply plugin: 'com.jfrog.bintray'

group = group_id
version = library_version
def ARTIFACT_ID = "recast"

kotlin {
    jvm()
    iosArm64 { binaries { framework { freeCompilerArgs.add("-Xobjc-generics") } } }
    iosX64 { binaries { framework { freeCompilerArgs.add("-Xobjc-generics") } } }

    sourceSets {

        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }

        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }

        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }

        iosArm64Main {
            kotlin.srcDirs += "src/iosMain/kotlin"
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "co.touchlab:stately:0.9.3"
            }
        }

        iosArm64Test {
            kotlin.srcDirs += "src/iosTest/kotlin"
            dependsOn commonTest
        }

        iosX64Main {
            kotlin.srcDirs += "src/iosMain/kotlin"
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "co.touchlab:stately:0.9.3"
            }
        }

        iosX64Test {
            kotlin.srcDirs += "src/iosTest/kotlin"
            dependsOn commonTest
        }

        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}

/**
 * Execute unit tests on an ios simulator.
 *
 * Properties:
 * device: The type of device to simulate. Default: iPhone 8
 */
task iosTest {
    def device = project.findProperty("device")?.toString() ?: "iPhone 8"
    dependsOn 'linkDebugTestIosX64'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Execute unit tests on ${device} simulator"
    doLast {
        def binary = kotlin.targets.iosX64.binaries.getTest('DEBUG')
        exec { commandLine 'xcrun', 'simctl', 'spawn', device, binary.outputFile }
    }
}


afterEvaluate {
    project.publishing.publications.all {
        groupId = group_id
        if (it.name.contains('metadata')) artifactId = "$ARTIFACT_ID"
        else artifactId = "$ARTIFACT_ID-$name"
    }
}

bintray {
    user = bintray_user
    key = bintray_api_key
    publish = true
    pkg {
        repo = bintray_repository
        name = ARTIFACT_ID
        userOrg = bintray_orginization
        licenses = ['Apache-2.0']
        vcsUrl = vcs_url
        websiteUrl = site_url
        issueTrackerUrl = issue_url
        desc = library_desc
        version {
            name = library_version
            vcsTag = library_version
            released = new Date()
        }
    }
}

bintrayUpload.doFirst { publications = publishing.publications.collect { it.name }.findAll { it != "kotlinMultiplatform" } }
bintrayUpload.dependsOn publishToMavenLocal