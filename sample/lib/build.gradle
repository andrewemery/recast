plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "kotlin-kapt"
}

group = "com.andrewemery.recast.sample"
version = "0.0.1"

kotlin {
    jvm()
    iosArm64 { binaries { framework { freeCompilerArgs.add("-Xobjc-generics") } } }
    iosX64 { binaries { framework { freeCompilerArgs.add("-Xobjc-generics") } } }

    sourceSets {

        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            }
        }

        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation project(path: ':lib', configuration: 'jvmDefault')
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }

        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }

        iosArm64Main {
            kotlin.srcDirs += "src/iosMain/kotlin"
            kotlin.srcDirs += "build/generated/source/kaptKotlin/main"
            dependsOn commonMain
            dependencies {
                implementation project(path: ':lib', configuration: 'iosArm64Default')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }

        iosArm64Test {
            kotlin.srcDirs += "src/iosTest/kotlin"
            dependsOn commonTest
        }


        iosX64Main {
            kotlin.srcDirs += "src/iosMain/kotlin"
            kotlin.srcDirs += "build/generated/source/kaptKotlin/main"
            dependsOn commonMain
            dependencies {
                implementation project(path: ":lib", configuration: 'iosX64Default')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }

        iosX64Test {
            kotlin.srcDirs += "src/iosTest/kotlin"
            dependsOn commonTest
        }

        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}

dependencies {
    kapt project(':kapt')
}

afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith('link') && task.name.contains('Ios')) {
            task.dependsOn 'kaptKotlinJvm'
        }
    }
}

/**
 * Build and synchronise (clear and copy) the ios framework files to the destination directory.
 *
 * Properties:
 * build_type: The type of build desired. One of [debug, release]. Default: debug.
 * platform: The target platform. One of [iphoneos, iphonesimulator]. Default: iphonesimulator.
 * destination: The directory to sync framework files to. Sync to default location if empty.
 */
task iosSyncFramework(type: Sync) {
    def buildType = project.findProperty("configuration.build.type")?.toLowerCase() ?: 'debug'
    def platform = project.findProperty("configuration.platform")?.toLowerCase() ?: 'iphonesimulator'
    def target = platform.contains('simulator') ? kotlin.targets.iosX64 : kotlin.targets.iosArm64
    def framework = target.binaries.getFramework('', buildType)
    inputs.property "mode", buildType.toUpperCase()
    dependsOn framework.linkTask
    def destination = project.findProperty("configuration.build.dir")
    if (destination == null) destination = "../ios/frameworks"
    println(buildType + " " + platform + " " + destination)
    from { framework.outputFile.parentFile }
    into destination
}